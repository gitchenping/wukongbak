#!/usr/bin/env python
#!encoding=utf8
import os
import sys
import platform

sys.path.append("..")
cwd = os.getcwd()
parent = os.path.dirname(cwd)
father_path = os.path.abspath(parent + os.path.sep + "..")
sys.path.append(father_path)
import requests
import json
from .util import *



cancel_sql = """
SELECT groupBitmapMerge(parent_id_state) as cancel_parent_num
FROM bi_mdata.dm_order_cancel_day
WHERE {date_str}
AND bd_id IN {bd_id}
AND `source` IN {source}
AND platform IN {platform}
AND shop_type IN {shop_type}
"""

cancel_trip_sql = """
SELECT  {select_case_when} as case_name
,groupBitmapMerge(parent_id_state) as cancel_parent_num
FROM bi_mdata.dm_order_cancel_day
WHERE ({date_str})
AND bd_id IN {bd_id}
AND `source` IN {source}
AND platform IN {platform}
AND shop_type IN {shop_type}
group by  case_name
"""

customer_case_when = """
case when {new_flag} = 1 then '新客'
when {new_flag} = 2 then '老客' end 
"""
bd_case_when = """
case  when bd_id in(5,12) then '出版物' 
when bd_id in(1,3,4,9,15,16) then '百货' 
WHEN bd_id IN (3) THEN '服装'
when bd_id in(6) then '数字' 
when bd_id in(20,21,23) then '文创' 
else '其他' end """

source_case_when = """
case when source=1 then '主站'
when source = 2  then '天猫'
when source = 3  then '抖音'
when source = 4  then '拼多多' end"""

platform_case_when = """
case when platform in (1,2) then 'APP'
when platform in (3,4,5,6,7,8,9) then '轻应用'
when platform in (12,20) then 'H5'
when platform in (0) then 'PC' end"""

app_case_when = """
case when platform=1 then '安卓'
when platform=2 then 'IOS' end"""

categorypath3_case_when = """case  when category_path3 in ('03.09.01.00.00.00','03.14.01.00.00.00','03.24.01.00.00.00','05.06.01.00.00.00','03.21.01.00.00.00','03.26.10.00.00.00','03.26.09.00.00.00','03.24.03.00.00.00','03.01.07.00.00.00','03.01.09.00.00.00','03.01.05.00.00.00','03.01.03.00.00.00','03.14.02.00.00.00','03.14.09.00.00.00','03.14.20.00.00.00','03.14.12.00.00.00','03.10.01.00.00.00','03.14.10.00.00.00','03.14.15.00.00.00','03.10.03.00.00.00','03.10.05.00.00.00','03.16.07.00.00.00','03.10.07.00.00.00','03.26.06.00.00.00','03.02.07.00.00.00','03.02.09.00.00.00','03.02.05.00.00.00','03.04.05.00.00.00','03.02.03.00.00.00','03.14.06.00.00.00','03.10.09.00.00.00','03.14.18.00.00.00','03.21.05.00.00.00','03.14.05.00.00.00','03.16.01.00.00.00','07.01.11.00.00.00','03.14.03.00.00.00','03.26.01.00.00.00','03.13.07.00.00.00','03.13.05.00.00.00','03.13.09.00.00.00','03.14.07.00.00.00','03.27.03.00.00.00','03.27.01.00.00.00','05.10.17.00.00.00','05.08.04.00.00.00','05.08.07.00.00.00','05.10.13.00.00.00','05.06.05.00.00.00','05.08.03.00.00.00','01.76.02.00.00.00','05.10.09.00.00.00','05.08.02.00.00.00','05.08.19.00.00.00','05.10.19.00.00.00','05.10.21.00.00.00','05.10.20.00.00.00','01.41.51.00.00.00','01.45.86.00.00.00','05.10.18.00.00.00','05.11.16.00.00.00','05.01.60.00.00.00','05.02.20.00.00.00','05.01.61.00.00.00','05.02.21.00.00.00','05.08.17.00.00.00','05.11.13.00.00.00','05.10.06.00.00.00','98.03.12.00.00.00','05.04.03.00.00.00','05.04.01.00.00.00','05.04.06.00.00.00','05.10.04.00.00.00','05.10.01.00.00.00','05.08.10.00.00.00','05.06.10.00.00.00','05.10.16.00.00.00','05.11.07.00.00.00','01.07.23.00.00.00','01.19.32.00.00.00','05.10.15.00.00.00','05.11.10.00.00.00','05.08.05.00.00.00','01.07.21.00.00.00','01.07.33.00.00.00','05.10.14.00.00.00','05.11.09.00.00.00','98.02.04.00.00.00','98.06.02.00.00.00','05.10.05.00.00.00','07.01.08.00.00.00','07.07.02.00.00.00','07.15.01.00.00.00','07.11.01.00.00.00','01.22.26.00.00.00','07.01.10.00.00.00','01.20.13.00.00.00','01.38.28.00.00.00','01.38.59.00.00.00','01.56.60.00.00.00','01.71.10.00.00.00','01.76.06.00.00.00','05.10.22.00.00.00','07.11.10.00.00.00','10.03.04.00.00.00','58.29.02.00.00.00','58.32.35.00.00.00','58.73.06.00.00.00','60.02.13.00.00.00','60.03.09.00.00.00','60.04.05.00.00.00','60.05.11.00.00.00','60.06.05.00.00.00','60.07.06.00.00.00','60.09.11.00.00.00','60.10.10.00.00.00','60.11.07.00.00.00','60.12.11.00.00.00','60.13.08.00.00.00','60.15.05.00.00.00','61.05.09.00.00.00','61.07.04.00.00.00','62.01.04.00.00.00','62.02.05.00.00.00','62.03.08.00.00.00','62.04.06.00.00.00','62.05.04.00.00.00','84.12.20.00.00.00','93.01.15.00.00.00','93.02.06.00.00.00','93.03.06.00.00.00','93.04.07.00.00.00','93.05.07.00.00.00','93.06.09.00.00.00','93.07.08.00.00.00','93.08.08.00.00.00','93.09.07.00.00.00','98.01.74.00.00.00') then '音像' 
when category_path3 in ('01.41.57.00.00.00','01.41.50.00.00.00','01.41.69.00.00.00','01.41.51.00.00.00','01.45.86.00.00.00','05.10.18.00.00.00','01.41.45.00.00.00','01.41.48.00.00.00','01.41.46.00.00.00','01.41.05.00.00.00','01.41.44.00.00.00','01.41.70.00.00.00','01.41.26.00.00.00','01.41.55.00.00.00','01.41.71.00.00.00','01.41.27.00.00.00','01.41.59.00.00.00') then '童书' 
when category_path3 in ('01.52.02.00.00.00','01.52.01.00.00.00','01.52.05.00.00.00','01.52.03.00.00.00','01.52.06.00.00.00','01.52.04.00.00.00','01.55.46.00.00.00','01.55.45.00.00.00','01.55.36.00.00.00','01.55.43.00.00.00','01.55.31.00.00.00','01.55.35.00.00.00','01.55.53.00.00.00','01.55.40.00.00.00','01.55.33.00.00.00','01.55.55.00.00.00','01.55.50.00.00.00','01.55.90.00.00.00','01.56.45.00.00.00','01.56.29.00.00.00','01.56.36.00.00.00','01.20.13.00.00.00','01.38.28.00.00.00','01.38.59.00.00.00','01.56.60.00.00.00','01.71.10.00.00.00','01.76.06.00.00.00','05.10.22.00.00.00','07.11.10.00.00.00','10.03.04.00.00.00','58.29.02.00.00.00','58.32.35.00.00.00','58.73.06.00.00.00','60.02.13.00.00.00','60.03.09.00.00.00','60.04.05.00.00.00','60.05.11.00.00.00','60.06.05.00.00.00','60.07.06.00.00.00','60.09.11.00.00.00','60.10.10.00.00.00','60.11.07.00.00.00','60.12.11.00.00.00','60.13.08.00.00.00','60.15.05.00.00.00','61.05.09.00.00.00','61.07.04.00.00.00','62.01.04.00.00.00','62.02.05.00.00.00','62.03.08.00.00.00','62.04.06.00.00.00','62.05.04.00.00.00','84.12.20.00.00.00','93.01.15.00.00.00','93.02.06.00.00.00','93.03.06.00.00.00','93.04.07.00.00.00','93.05.07.00.00.00','93.06.09.00.00.00','93.07.08.00.00.00','93.08.08.00.00.00','93.09.07.00.00.00','98.01.74.00.00.00','01.56.39.00.00.00','01.56.33.00.00.00','01.56.51.00.00.00','01.56.50.00.00.00','01.56.54.00.00.00','01.56.41.00.00.00','01.56.56.00.00.00','01.56.55.00.00.00','01.56.27.00.00.00','01.56.34.00.00.00','01.56.35.00.00.00','01.56.40.00.00.00','01.56.90.00.00.00','01.56.46.00.00.00','01.56.28.00.00.00','01.62.03.00.00.00','01.62.05.00.00.00','01.62.08.00.00.00','01.62.07.00.00.00','01.62.01.00.00.00','01.62.02.00.00.00','01.62.04.00.00.00','01.62.09.00.00.00','01.62.15.00.00.00','01.66.01.00.00.00','01.66.03.00.00.00','01.66.09.00.00.00','01.66.05.00.00.00','01.66.22.00.00.00','01.66.20.00.00.00','01.66.10.00.00.00','01.66.11.00.00.00','01.66.07.00.00.00','01.66.17.00.00.00','01.66.15.00.00.00','01.63.01.00.00.00','01.63.10.00.00.00','01.63.09.00.00.00','01.63.16.00.00.00','01.63.32.00.00.00','01.63.26.00.00.00','01.63.30.00.00.00','01.63.03.00.00.00','01.63.14.00.00.00','01.63.20.00.00.00','01.63.22.00.00.00','01.63.24.00.00.00','01.63.07.00.00.00','01.63.05.00.00.00','01.63.12.00.00.00','01.63.11.00.00.00','01.63.15.00.00.00','01.63.23.00.00.00','01.63.18.00.00.00','01.63.13.00.00.00','01.54.09.00.00.00','01.54.12.00.00.00','01.54.92.00.00.00','01.54.18.00.00.00','01.54.19.00.00.00','01.54.08.00.00.00','01.54.17.00.00.00','01.54.13.00.00.00','01.54.24.00.00.00','01.54.04.00.00.00','01.54.05.00.00.00','01.54.23.00.00.00','01.54.21.00.00.00','01.54.03.00.00.00','01.54.91.00.00.00','01.54.06.00.00.00','01.54.16.00.00.00','01.54.07.00.00.00','01.54.11.00.00.00','01.54.22.00.00.00','01.54.26.00.00.00','01.54.02.00.00.00','01.54.14.00.00.00','01.54.10.00.00.00','01.54.20.00.00.00') then '科技' 
when category_path3 in ('01.22.18.00.00.00','01.22.13.00.00.00','01.22.01.00.00.00','01.22.02.00.00.00','01.22.10.00.00.00','01.22.12.00.00.00','01.22.19.00.00.00','01.22.25.00.00.00','01.22.15.00.00.00','01.25.15.00.00.00','01.43.72.00.00.00','98.01.50.00.00.00','01.22.03.00.00.00','01.22.04.00.00.00','01.22.05.00.00.00','01.22.14.00.00.00','01.22.06.00.00.00','01.22.07.00.00.00','01.24.05.00.00.00','01.25.13.00.00.00','01.24.02.00.00.00','01.24.04.00.00.00','01.24.14.00.00.00','01.24.06.00.00.00','01.24.13.00.00.00','01.24.03.00.00.00','01.24.16.00.00.00','01.24.10.00.00.00','01.24.01.00.00.00','01.24.07.00.00.00','01.24.15.00.00.00','01.25.09.00.00.00','01.24.05.00.00.00','01.25.13.00.00.00','01.25.04.00.00.00','01.25.02.00.00.00','01.25.11.00.00.00','01.25.10.00.00.00','01.22.15.00.00.00','01.25.15.00.00.00','01.43.72.00.00.00','98.01.50.00.00.00','01.25.14.00.00.00','01.25.01.00.00.00','01.25.03.00.00.00','01.25.12.00.00.00','01.26.23.00.00.00','01.25.16.00.00.00','01.25.06.00.00.00','01.25.05.00.00.00','01.25.17.00.00.00','01.47.04.00.00.00','01.25.07.00.00.00','01.25.08.00.00.00','01.21.08.00.00.00','01.21.01.00.00.00','01.21.09.00.00.00','01.21.14.00.00.00','01.21.16.00.00.00','01.21.20.00.00.00','01.21.12.00.00.00','01.21.19.00.00.00','01.21.15.00.00.00','01.21.10.00.00.00','01.21.18.00.00.00','01.21.03.00.00.00','01.21.04.00.00.00','01.21.06.00.00.00','01.21.02.00.00.00','01.21.05.00.00.00','01.21.17.00.00.00','01.21.11.00.00.00','01.21.07.00.00.00','01.21.13.00.00.00') then '经营' 
when category_path3 in ('01.58.11.00.00.00','01.58.04.00.00.00','01.58.23.00.00.00','01.58.09.00.00.00','01.58.19.00.00.00','01.58.02.00.00.00','01.58.21.00.00.00','01.58.24.00.00.00','01.58.03.00.00.00','01.58.18.00.00.00','01.59.08.00.00.00','01.59.01.00.00.00','98.01.05.00.00.00','98.03.04.00.00.00','01.58.01.00.00.00','01.58.08.00.00.00','01.59.03.00.00.00','01.69.07.00.00.00','98.03.05.00.00.00','01.58.17.00.00.00','01.58.10.00.00.00','01.58.05.00.00.00','01.58.16.00.00.00','01.58.14.00.00.00') then '原版' 
when category_path3 in ('01.15.91.00.00.00','01.15.93.00.00.00','01.15.92.00.00.00','01.15.11.00.00.00','01.15.09.00.00.00','01.15.15.00.00.00','01.15.13.00.00.00','01.15.03.00.00.00','01.15.01.00.00.00','01.15.17.00.00.00','01.15.05.00.00.00','01.15.07.00.00.00','01.15.90.00.00.00','01.11.05.00.00.00','58.74.25.00.00.00','62.05.03.00.00.00','01.11.13.00.00.00','01.11.11.00.00.00','01.11.03.00.00.00','98.03.02.00.00.00','01.11.09.00.00.00','01.11.01.00.00.00','92.06.04.00.00.00','01.11.07.00.00.00','01.14.07.00.00.00','01.14.91.00.00.00','01.14.01.00.00.00','01.14.03.00.00.00','01.14.05.00.00.00','01.04.11.00.00.00','01.04.05.00.00.00','01.04.08.00.00.00','01.04.10.00.00.00','01.04.03.00.00.00','01.04.07.00.00.00','01.04.09.00.00.00','01.20.13.00.00.00','01.38.28.00.00.00','01.38.59.00.00.00','01.56.60.00.00.00','01.71.10.00.00.00','01.76.06.00.00.00','05.10.22.00.00.00','07.11.10.00.00.00','10.03.04.00.00.00','58.29.02.00.00.00','58.32.35.00.00.00','58.73.06.00.00.00','60.02.13.00.00.00','60.03.09.00.00.00','60.04.05.00.00.00','60.05.11.00.00.00','60.06.05.00.00.00','60.07.06.00.00.00','60.09.11.00.00.00','60.10.10.00.00.00','60.11.07.00.00.00','60.12.11.00.00.00','60.13.08.00.00.00','60.15.05.00.00.00','61.05.09.00.00.00','61.07.04.00.00.00','62.01.04.00.00.00','62.02.05.00.00.00','62.03.08.00.00.00','62.04.06.00.00.00','62.05.04.00.00.00','84.12.20.00.00.00','93.01.15.00.00.00','93.02.06.00.00.00','93.03.06.00.00.00','93.04.07.00.00.00','93.05.07.00.00.00','93.06.09.00.00.00','93.07.08.00.00.00','93.08.08.00.00.00','93.09.07.00.00.00','98.01.74.00.00.00','01.20.05.00.00.00','01.20.03.00.00.00','01.20.14.00.00.00','01.20.07.00.00.00','01.20.01.00.00.00','01.20.09.00.00.00','01.16.01.00.00.00','98.01.16.00.00.00','01.16.03.00.00.00','01.16.04.00.00.00','01.16.02.00.00.00','01.10.13.00.00.00','01.10.01.00.00.00','01.10.03.00.00.00','01.10.15.00.00.00','01.10.09.00.00.00','01.10.05.00.00.00','01.18.03.00.00.00','01.10.07.00.00.00','01.10.91.00.00.00','01.10.11.00.00.00','01.18.01.00.00.00','01.18.06.00.00.00','01.18.10.00.00.00','01.18.08.00.00.00','01.18.05.00.00.00','01.18.11.00.00.00','01.18.09.00.00.00','05.10.12.00.00.00','01.18.07.00.00.00','01.10.05.00.00.00','01.18.03.00.00.00','01.18.04.00.00.00','01.18.02.00.00.00','01.12.31.00.00.00','01.12.33.00.00.00','01.12.55.00.00.00','01.12.35.00.00.00','01.12.53.00.00.00','01.12.37.00.00.00','01.12.39.00.00.00','01.12.43.00.00.00','01.12.45.00.00.00','01.12.50.00.00.00','01.12.41.00.00.00','01.12.90.00.00.00','01.19.20.00.00.00','01.19.26.00.00.00','01.19.34.00.00.00','01.19.10.00.00.00','01.19.28.00.00.00','01.19.22.00.00.00','01.19.36.00.00.00','01.19.21.00.00.00','01.19.23.00.00.00','01.19.25.00.00.00','01.19.29.00.00.00','01.19.12.00.00.00','01.19.16.00.00.00','01.19.35.00.00.00','01.19.27.00.00.00','01.19.30.00.00.00','01.19.33.00.00.00','01.19.13.00.00.00','01.19.14.00.00.00','01.19.18.00.00.00','01.19.19.00.00.00','01.07.23.00.00.00','01.19.32.00.00.00','05.10.15.00.00.00','05.11.10.00.00.00','01.19.11.00.00.00','01.19.24.00.00.00','01.19.15.00.00.00','01.19.31.00.00.00','01.19.17.00.00.00','01.06.12.00.00.00','01.17.59.00.00.00','01.17.55.00.00.00','01.06.08.00.00.00','01.06.02.00.00.00','01.06.06.00.00.00','01.06.10.00.00.00','01.17.50.00.00.00','01.17.40.00.00.00','01.06.04.00.00.00') then '生活' 
when category_path3 in ('01.26.29.00.00.00','01.26.20.00.00.00','01.26.06.00.00.00','01.26.18.00.00.00','01.26.22.00.00.00','01.26.14.00.00.00','01.26.25.00.00.00','01.26.26.00.00.00','01.26.07.00.00.00','01.26.38.00.00.00','01.26.13.00.00.00','01.26.21.00.00.00','01.26.31.00.00.00','01.26.16.00.00.00','01.26.03.00.00.00','01.26.28.00.00.00','01.26.34.00.00.00','01.26.32.00.00.00','01.26.01.00.00.00','01.26.30.00.00.00','01.26.36.00.00.00','01.26.02.00.00.00','01.26.09.00.00.00','01.26.05.00.00.00','01.25.12.00.00.00','01.26.23.00.00.00','01.26.15.00.00.00','01.26.04.00.00.00','01.26.24.00.00.00','01.26.37.00.00.00','01.03.43.00.00.00','01.27.02.00.00.00','98.03.08.00.00.00','01.27.01.00.00.00','01.28.01.00.00.00','01.28.02.00.00.00','01.30.06.00.00.00','01.30.11.00.00.00','98.03.10.00.00.00','98.04.02.00.00.00','01.30.03.00.00.00','01.30.04.00.00.00','01.30.02.00.00.00','01.30.01.00.00.00','01.30.09.00.00.00','01.30.05.00.00.00','01.32.11.00.00.00','01.32.09.00.00.00','01.32.12.00.00.00','01.32.08.00.00.00','01.32.02.00.00.00','01.32.07.00.00.00','01.32.03.00.00.00','01.32.10.00.00.00','01.32.01.00.00.00','01.32.04.00.00.00','01.34.05.00.00.00','01.34.23.00.00.00','01.34.04.00.00.00','01.34.08.00.00.00','01.34.17.00.00.00','01.34.18.00.00.00','01.34.16.00.00.00','01.34.07.00.00.00','01.34.01.00.00.00','01.34.09.00.00.00','01.34.03.00.00.00','01.34.02.00.00.00','01.34.13.00.00.00','01.34.12.00.00.00','01.34.11.00.00.00','01.34.25.00.00.00','01.34.21.00.00.00','01.34.24.00.00.00','01.31.11.00.00.00','01.31.05.00.00.00','01.31.19.00.00.00','01.31.12.00.00.00','01.31.91.00.00.00','01.31.15.00.00.00','01.31.04.00.00.00','01.31.18.00.00.00','01.31.01.00.00.00','01.31.03.00.00.00','01.31.16.00.00.00','01.31.22.00.00.00','01.31.02.00.00.00','01.31.92.00.00.00','01.31.06.00.00.00','01.31.14.00.00.00','01.31.10.00.00.00','01.31.13.00.00.00','01.31.08.00.00.00','01.31.21.00.00.00','01.31.07.00.00.00','01.31.09.00.00.00','01.31.20.00.00.00','01.36.10.00.00.00','01.36.05.00.00.00','01.36.04.00.00.00','01.36.14.00.00.00','01.36.01.00.00.00','01.36.02.00.00.00','01.36.91.00.00.00','01.36.03.00.00.00','01.36.07.00.00.00','01.36.06.00.00.00','01.36.11.00.00.00','01.36.13.00.00.00','01.36.09.00.00.00','01.36.90.00.00.00','01.36.08.00.00.00') then '社科' 
when category_path3 in ('01.49.06.00.00.00','01.49.30.00.00.00','01.49.07.00.00.00','01.49.01.00.00.00','01.49.08.00.00.00','01.49.90.00.00.00','01.49.05.00.00.00','01.43.19.00.00.00','01.43.75.00.00.00','01.43.70.00.00.00','01.43.31.00.00.00','01.43.21.00.00.00','01.43.20.00.00.00','01.43.17.00.00.00','01.50.03.00.00.00','01.43.74.00.00.00','01.43.55.00.00.00','01.43.22.00.00.00','01.43.53.00.00.00','01.43.12.00.00.00','01.43.14.00.00.00','01.43.13.00.00.00','01.43.16.00.00.00','01.43.30.00.00.00','01.43.15.00.00.00','01.43.18.00.00.00','01.22.15.00.00.00','01.25.15.00.00.00','01.43.72.00.00.00','98.01.50.00.00.00','01.43.76.00.00.00','01.43.54.00.00.00','01.50.06.00.00.00','01.50.01.00.00.00','01.50.05.00.00.00','01.43.50.00.00.00','01.43.71.00.00.00','01.45.63.00.00.00','01.50.02.00.00.00','01.43.37.00.00.00','01.43.73.00.00.00','01.43.23.00.00.00','01.43.25.00.00.00','01.43.24.00.00.00','01.43.26.00.00.00','01.43.32.00.00.00','01.43.69.00.00.00','01.45.83.00.00.00','01.45.85.00.00.00','01.45.76.00.00.00','01.45.81.00.00.00','01.45.60.00.00.00','01.45.52.00.00.00','07.01.09.00.00.00','01.45.82.00.00.00','01.41.51.00.00.00','01.45.86.00.00.00','05.10.18.00.00.00','01.45.72.00.00.00','10.23.04.00.00.00','01.45.75.00.00.00','01.45.70.00.00.00','10.23.03.00.00.00','01.45.71.00.00.00','10.23.02.00.00.00','01.45.98.00.00.00','01.45.56.00.00.00','01.45.84.00.00.00','01.45.63.00.00.00','01.50.02.00.00.00','01.45.57.00.00.00','01.45.55.00.00.00','10.02.03.00.00.00','10.14.01.00.00.00','01.45.62.00.00.00','01.45.61.00.00.00','01.45.74.00.00.00','10.23.06.00.00.00','01.45.73.00.00.00','10.23.01.00.00.00','01.47.11.00.00.00','01.47.12.00.00.00','01.47.07.00.00.00','01.47.06.00.00.00','01.47.91.00.00.00','01.47.02.00.00.00','01.47.92.00.00.00','01.47.05.00.00.00','01.47.10.00.00.00','01.47.95.00.00.00','07.11.07.00.00.00','01.47.97.00.00.00','01.47.01.00.00.00','01.47.93.00.00.00','07.11.05.00.00.00','01.47.98.00.00.00','01.47.09.00.00.00','01.47.94.00.00.00','01.47.08.00.00.00','01.47.03.00.00.00','01.25.17.00.00.00','01.47.04.00.00.00') then '教育' 
when category_path3 in ('01.03.56.00.00.00','01.03.32.00.00.00','01.03.30.00.00.00','01.03.31.00.00.00','01.03.47.00.00.00','01.03.55.00.00.00','01.03.38.00.00.00','01.03.43.00.00.00','01.27.02.00.00.00','98.03.08.00.00.00','01.03.51.00.00.00','01.69.11.00.00.00','98.01.36.00.00.00','01.03.33.00.00.00','01.03.35.00.00.00','01.03.50.00.00.00','01.03.52.00.00.00','01.03.44.00.00.00','01.03.39.00.00.00','01.03.42.00.00.00','01.03.34.00.00.00','01.03.45.00.00.00','01.69.12.00.00.00','98.10.02.00.00.00','01.03.41.00.00.00','01.03.48.00.00.00','01.03.90.00.00.00','01.03.49.00.00.00','98.03.03.00.00.00','01.03.46.00.00.00','98.11.04.00.00.00','01.03.40.00.00.00','01.05.15.00.00.00','01.05.12.00.00.00','01.05.13.00.00.00','01.05.16.00.00.00','01.05.91.00.00.00','01.05.14.00.00.00','01.05.17.00.00.00','01.05.18.00.00.00','01.05.11.00.00.00','01.05.92.00.00.00','01.05.06.00.00.00','01.05.19.00.00.00','01.05.07.00.00.00','01.05.90.00.00.00','01.07.03.00.00.00','01.07.09.00.00.00','01.07.31.00.00.00','05.06.11.00.00.00','01.07.41.00.00.00','01.07.32.00.00.00','01.07.37.00.00.00','01.07.11.00.00.00','01.07.13.00.00.00','01.07.05.00.00.00','01.07.26.00.00.00','01.07.40.00.00.00','98.01.08.00.00.00','01.07.36.00.00.00','01.07.07.00.00.00','01.07.27.00.00.00','01.07.23.00.00.00','01.19.32.00.00.00','05.10.15.00.00.00','05.11.10.00.00.00','01.07.01.00.00.00','01.07.25.00.00.00','01.07.39.00.00.00','01.07.30.00.00.00','01.07.28.00.00.00','62.03.05.00.00.00','01.07.21.00.00.00','01.07.33.00.00.00','05.10.14.00.00.00','05.11.09.00.00.00','98.02.04.00.00.00','98.06.02.00.00.00','01.01.12.00.00.00','01.01.03.00.00.00','01.01.14.00.00.00','01.01.08.00.00.00','01.01.05.00.00.00','01.01.13.00.00.00','01.01.04.00.00.00','01.01.01.00.00.00','01.01.09.00.00.00','01.01.06.00.00.00','01.01.02.00.00.00','01.01.07.00.00.00','01.01.11.00.00.00','01.01.15.00.00.00','01.01.10.00.00.00','01.09.10.00.00.00','01.09.09.00.00.00','01.09.28.00.00.00','01.09.15.00.00.00','01.09.29.00.00.00','01.09.01.00.00.00','01.09.12.00.00.00','01.09.20.00.00.00','01.09.03.00.00.00','01.09.06.00.00.00','01.09.02.00.00.00','01.09.24.00.00.00','01.09.26.00.00.00','01.38.11.00.00.00','01.38.49.00.00.00','01.38.21.00.00.00','01.38.22.00.00.00','01.38.19.00.00.00','01.38.57.00.00.00','01.20.13.00.00.00','01.38.28.00.00.00','01.38.59.00.00.00','01.56.60.00.00.00','01.71.10.00.00.00','01.76.06.00.00.00','05.10.22.00.00.00','07.11.10.00.00.00','10.03.04.00.00.00','58.29.02.00.00.00','58.32.35.00.00.00','58.73.06.00.00.00','60.02.13.00.00.00','60.03.09.00.00.00','60.04.05.00.00.00','60.05.11.00.00.00','60.06.05.00.00.00','60.07.06.00.00.00','60.09.11.00.00.00','60.10.10.00.00.00','60.11.07.00.00.00','60.12.11.00.00.00','60.13.08.00.00.00','60.15.05.00.00.00','61.05.09.00.00.00','61.07.04.00.00.00','62.01.04.00.00.00','62.02.05.00.00.00','62.03.08.00.00.00','62.04.06.00.00.00','62.05.04.00.00.00','84.12.20.00.00.00','93.01.15.00.00.00','93.02.06.00.00.00','93.03.06.00.00.00','93.04.07.00.00.00','93.05.07.00.00.00','93.06.09.00.00.00','93.07.08.00.00.00','93.08.08.00.00.00','93.09.07.00.00.00','98.01.74.00.00.00','01.38.04.00.00.00','01.38.37.00.00.00','01.36.15.00.00.00','01.38.02.00.00.00','01.36.16.00.00.00','01.38.06.00.00.00','01.38.39.00.00.00','01.38.10.00.00.00','01.38.17.00.00.00','01.38.07.00.00.00','01.38.41.00.00.00','01.38.27.00.00.00','01.38.09.00.00.00','01.38.35.00.00.00','01.38.23.00.00.00','01.38.24.00.00.00','01.38.91.00.00.00','01.38.18.00.00.00','01.38.55.00.00.00','01.38.05.00.00.00','01.38.31.00.00.00','01.38.12.00.00.00','01.38.14.00.00.00','01.38.45.00.00.00','01.38.08.00.00.00','01.38.26.00.00.00','01.38.16.00.00.00','01.38.51.00.00.00','01.38.25.00.00.00','01.38.15.00.00.00','01.38.47.00.00.00','01.38.90.00.00.00','01.38.13.00.00.00','01.38.01.00.00.00','01.38.33.00.00.00','01.38.03.00.00.00') then '文艺' 
else 'others' end"""



# 请求接口，并返回接口的json数据
def get_api_result(url):
    json_result = []
    try:
        res = requests.get(url)
        content = res.content
        json_result = json.loads(content)
    except Exception:
        print('请求异常的url:',url)
    return json_result


# 解析首页数据数据
def parse_core_index_data(js):
    # 解析json结果集，进行数据比对
    if len(js) > 0:
        code = js["code"]
        api_list = []
        api_hb_list = []
        api_tb_year_list = []
        api_tb_week_list = []
        if code != 200:
            code = js["code"]
            return code
        elif len(js['data']) == 0:
            return  api_list, api_hb_list, api_tb_year_list, api_tb_week_list
        else:
            data_list = js["data"]["list"]
            if len(data_list) != 0:
                for i in range(len(data_list)):
                    api_map = {j['ename']: j['value'] for j in data_list[i]['sub']}
                    api_list.append(api_map)
                    result_list = data_list[i]['sub']
                    for i in range(len(result_list)):
                        if 'value_hb' in result_list[i].keys():
                            result_hb_map={result_list[i]['ename']: result_list[i]['value_hb']}
                        else:
                            result_hb_map={result_list[i]['ename']: '--'}
                        api_hb_list.append(result_hb_map)
                        if 'tb_week' in result_list[i].keys():
                            api_tb_week = {result_list[i]['ename']: result_list[i]['tb_week']}
                        else:
                            api_tb_week ={result_list[i]['name']: '--'}
                        api_tb_week_list.append(api_tb_week)
                        if 'tb_year' in  result_list[i].keys():
                            api_tb_year = {result_list[i]['ename']: result_list[i]['tb_year']}
                        else:
                            api_tb_year= {result_list[i]['ename']: '--'}
                        api_tb_year_list.append(api_tb_year)
                return api_list, api_hb_list, api_tb_year_list, api_tb_week_list
            else:
                return api_list, api_hb_list, api_tb_year_list, api_tb_week_list
    else:
        return api_list, api_hb_list, api_tb_year_list, api_tb_week_list


# 提取下钻页的结果
def parse_trip_data_trend(js, date_type):
    """
    # 因为trend接口返回json串与其他下钻页不一致，所以需要单独处理
    :param result_json:
    :return:
    """
    if len(js)> 0:
        code = js["code"]
        if code != 200:
            return code
        else:
            data = js["data"]
            if len(data) != 0:
                # 只有天的数据是返回当日和去年相同天数的map数据，周月季都只返回一个当周、当月和当季的map
                if date_type == 'd':
                    if 'values' in data[0]:
                        values_list = data[0]['values']
                        result_now_map = {i[0]: i[1] for i in values_list}
                        return result_now_map
                    else:
                        return {}
                else:
                    if 'values' in data[0]:
                        values_list = data[0]['values']
                        result_now_map={i[0]: i[1] for i in values_list}
                        return result_now_map
                    else:
                        return {}
            else:
                return {}
    else:
        return {}


def parse_trip_data(js):
    """
    解析接口返回data中的数据，包含customer,city,bd,platform
    :param result_json:
    :return:
    """
    # app 返回的data是列表中包含多个字典表
    hb_list = []
    tb_year_list = []
    tb_week_list = []
    zb_list = []
    if len(js) > 0:
        code = js["code"]
        if code != 200:
            return code
        else:
            data = js["data"]
            if len(data) != 0:
                result_map={i['name']: i['value'] for i in data}
                for i in range(len(data)):
                    if 'value_hb' in data[i].keys():
                        result_hb_map = {data[i]['name']: data[i]['value_hb']}
                    else:
                        result_hb_map={data[i]['name']: '--'}
                    hb_list.append(result_hb_map)
                    if 'tb_year' in data[i].keys():
                        result_tb_year_map = {data[i]['name']: data[i]['tb_year']}
                    else:
                        result_tb_year_map = {data[i]['name']: '--'}
                    tb_year_list.append(result_tb_year_map)
                    if 'tb_week' in data[i]:
                        result_tb_week_map = {data[i]['name']: data[i]['tb_week']}
                    else:
                        result_tb_week_map = {data[i]['name']: '--'}
                    tb_week_list.append(result_tb_week_map)
                    if 'value_zb' in data[i]:
                        zb_map = {data[i]['name']: data[i]['value_zb']}
                    else:
                        zb_map = {}
                    zb_list.append(zb_map)
                result_zb_map = {key: value for z in zb_list for key, value in z.items()}
                result_tb_year_map={key: value for t in tb_year_list for key, value in t.items()}
                result_tb_week_map = {key: value for t in tb_week_list for key, value in t.items()}
                result_hb_map = {key: value for h in hb_list for key, value in h.items()}
                return result_map, result_hb_map, result_tb_year_map, result_tb_week_map, result_zb_map
            else:
                return {}, {}, {}, {}, {}
    else:
        return {}, {}, {}, {}, {}


def parse_url_parma(url):
    url_params = url.split('&')
    params = {}
    for i in url_params:
        tmp = i.split('=')
        params[tmp[0]] = tmp[1]
    return params


def get_sql_from_platform(params):
    source = params['source']
    parent_platform = params['parent_platform']
    platform = params['platform']
    if source == '1':
        if parent_platform == '1' and platform == 'all':
            return "(1, 2)"
        elif parent_platform == '2' and platform == 'all':
            return "(3,4,5,6,7,8,9)"
        elif parent_platform == '3' and platform == 'all':
            return "(12, 20)"
        elif parent_platform == '4' and platform == 'all':
            return "({from_platform})".format(from_platform=0)
        elif parent_platform == 'all' and platform == 'all':
            return "(1,2,3,4,5,6,7,8,9,12,20,0)"
        else:
            platform_int = int(platform)
            return "({from_platform})".format(from_platform=platform_int)
    elif source == '2':
        return "(101,102,103)"
    elif source == '3':
        return "(104)"
    elif source == '4':
        return "(105)"
    else:
        return"(1,2,3,4,5,6,7,8,9,12,20,0,101,102,103,104,105)"


def get_source(params):
    if 'source' in params.keys():
        source = params['source']
        if source == 'all':
            return "(1,2,3,4)"
        else:
            return "({source})".format(source=source)


def get_sql_shop_type(params):
    if 'shop_type' in params.keys():
        shop_type = params["shop_type"]
        if shop_type != 'all':
            return "({shop_type})".format(shop_type=shop_type)
        else:
            return "(1,2)"


def get_sql_bd_id(params):
    if 'bd_id' in params.keys():
        bd_id = params["bd_id"]
        if bd_id == 'all':
            return "(5,12,1,3,4,9,15,16,6,20,21,22,23,0,13,2)"
        elif bd_id == '1':
            return "(5,12)"
        elif bd_id == '2':
            return "(1,4,9,15,16)"
        elif bd_id == '6':
            return "(3)"
        elif bd_id == '4':
            return "(20,21,23)"

def get_trip_hb_result(ratio_result,result):
    """
    获取相同条件下，不同时间周期的结果，进行同环比结果计算，返回map格式数据
    """
    hb_result_list = []
    if len(result) > 0 and len(ratio_result) > 0:
        for r_key in ratio_result.keys():
            for k in result.keys():
                if r_key == k:
                    print(type(ratio_result[r_key]),ratio_result[r_key])
                    print(type(result[k]),result[k])
                    ratio = ratio_result[r_key]
                    if ratio == 0:
                        hb_result = {r_key:None}
                    elif ratio == '--' or result[k] == '--':
                        hb_result = {r_key:None}
                    else:
                        value = format_ratio(round((float(result[k])-float(ratio))/float(ratio)*100,2))
                        hb_result = {r_key:value}
                    hb_result_list.append(hb_result)
                else:
                    continue
    if len(hb_result_list) > 0:
        hb_result_map = {key: value for i in hb_result_list for key, value in i.items()}
    else:
        hb_result_map = {}
    return hb_result_map


def get_cancel_rate_result(result,cancel_result):
    """
    提供相同条件下的收订结果和取消订单结果，进行收订取消率计算
    :param result: 收订的计算结果
    :param cancel_result: 取消的结算结果
    :return: 处理后的取消率结果
    """
    result_list = []
    if len(result) != 0:
        for i in range(len(result)):
            for j in range(len(cancel_result)):
                if result[i][0] == cancel_result[j][0]:
                    if result[i][1] != 0:
                        result_map = {result[i][0]: round(cancel_result[j][1] / result[i][1] * 100, 2)}
                    else:
                        result_map = {result[i][0]: '--'}
                    result_list.append((result_map))
                else:
                    continue
        result_map={key: value for r in result_list for key, value in r.items()}
    else:
        result_map={}
    return result_map


if __name__ == '__main__':
    url1 = """http://192.168.105.85:8085/api/overview_v5?action=user_analysis&view=trend&field_str=create_parent_uv_ck
    &date_type=d&date=2020-12-30&shop_type=&eliminate_type=&source=1&parent_platform=2&platform=3&sale_type=&bd_id=3"""
    url2= """http://192.168.105.85:8085/api/overview_v5?action=user_analysis&view=trend&field_str=create_parent_uv_zf
    &date_type=d&date=2020-12-30&shop_type=&eliminate_type=&source=1&parent_platform=2&platform=3&sale_type=&bd_id=3"""
    get_api_result(url1)
    get_api_result(url2)
